<Project ToolsVersion="15.0">
  <ItemGroup>
    <!-- Removes native usings to avoid Ambiguous reference -->
    <Using Remove="@(Using->HasMetadata('Platform'))" />
  </ItemGroup>


  <PropertyGroup>
    <!--
      macOS needs an explicit override of the current compiler when running under mono.
      On other targets, .NET 6.0's compiler takes precedence.
      -->
    <MicrosoftNetCompilerVersionOverride Condition="'$(MSBuildRuntimeType)'!='Core' and ($([MSBuild]::IsOSPlatform('OSX')) or '$(MSBuildVersion)' &lt; '17.0')">4.0.1</MicrosoftNetCompilerVersionOverride>
  </PropertyGroup>

  <!--
  This file is imported from Directory.Build.props as the nuget tooling
  in VS is skipping ItemGroup conditions for legacy projects (iOS, Android, ...).
  -->
  <Choose>
    <When Condition="'$(MicrosoftNetCompilerVersionOverride)'!=''">
      <PropertyGroup>
        <!--
          Disable shared compilation for the override to take place
          https://github.com/dotnet/roslyn/blob/315c2e149ba7889b0937d872274c33fcbfe9af5f/src/NuGet/Microsoft.Net.Compilers/build/Microsoft.Net.Compilers.props#L36
          -->
        <UseSharedCompilation>false</UseSharedCompilation>
      </PropertyGroup>
      <ItemGroup>

        <!--This override is used to validate the user of specific version of the C# Compiler-->
        <PackageReference Include="Microsoft.Net.Compilers.Toolset" VersionOverride="$(MicrosoftNetCompilerVersionOverride)">
          <PrivateAssets>all</PrivateAssets>
          <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
        </PackageReference>
      </ItemGroup>

    </When>
  </Choose>

  <Import Project="..\..\src\xamarinmac-workaround.targets" Condition="exists('..\..\src\xamarinmac-workaround.targets') and $(TargetFramework.ToLower().StartsWith('xamarin')) and $(TargetFramework.ToLower().Contains('mac'))" />

  <!-- Workaround to avoid including Uno.Toolkit.UI XBFs in the PRI file -->
  <Target Name="AdjustGetPackagingOutput1" AfterTargets="GetMrtPackagingOutputs">
    <Message Importance="high" Text="Applying NuGet packaging workaround for dependent PRI files exclusion" />
    <ItemGroup>
      <_OtherPriFiles Include="@(PackagingOutputs)" Condition="'%(Extension)' == '.pri' and ('%(PackagingOutputs.ReferenceSourceTarget)' == 'ProjectReference' or '%(PackagingOutputs.NugetSourceType)'=='Package')" />
      <PackagingOutputs Remove="@(_OtherPriFiles)" />
    </ItemGroup>
  </Target>

  <Target Name="AdjustGetPackagingOutput2" BeforeTargets="AddPriPayloadFilesToCopyToOutputDirectoryItems">
    <Message Importance="high" Text="Applying NuGet packaging workaround for dependent PRI files exclusion" />
    <ItemGroup>
      <_OtherPriFiles1 Include="@(_ReferenceRelatedPaths)" Condition="'%(Extension)' == '.pri' and ('%(_ReferenceRelatedPaths.ReferenceSourceTarget)' == 'ProjectReference' or '%(_ReferenceRelatedPaths.NugetSourceType)'=='Package')" />
      <_ReferenceRelatedPaths Remove="@(_OtherPriFiles1)" />
      <_OtherPriFiles2 Include="@(ReferenceCopyLocalPaths)" Condition="'%(Extension)' == '.pri' and ('%(ReferenceCopyLocalPaths.ReferenceSourceTarget)' == 'ProjectReference' or '%(ReferenceCopyLocalPaths.NugetSourceType)'=='Package')" />
      <ReferenceCopyLocalPaths Remove="@(_OtherPriFiles2)" />
    </ItemGroup>
  </Target>
</Project>
